import { Strategy, StrategyVerifyCallback } from "../strategy";
export interface BasicStrategyOptions {
    realm?: string;
}
export interface BasicStrategyVerifyCallbackParams {
    userId: string;
    password: string;
}
export interface BasicStrategyVerifyCallback<User> {
    (userId: string, password: string): Promise<User>;
}
/**
 * The HTTP Basic authentication strategy authenticates requests based on
 * userId and password credentials contained in the `Authorization` header
 * field.
 *
 * Applications must supply a `verify` callback which accepts `userId` and
 * `password` credentials, and then return supplying a `user`, which should
 * raise an error if the credentials are not valid or an exception ocurred.
 *
 * Optionally, `options` can be used to change the authentication realm.
 *
 * Options:
 * - `realm`  authentication realm, defaults to "Users"
 *
 * @example
 * authenticator.use(new BasicStrategy(
 *   { realm: "Users" },
 *   (userId, password) => {
 *     return User.findOne({ username: userId, password: password });
 *   }
 * ));
 *
 * For further details on HTTP Basic authentication, refer to [RFC 2617: HTTP Authentication: Basic and Digest Access Authentication](http://tools.ietf.org/html/rfc2617)
 */
export declare class BasicStrategy<User> extends Strategy<User, BasicStrategyVerifyCallbackParams> {
    name: string;
    private realm;
    constructor(options: BasicStrategyOptions, verify: StrategyVerifyCallback<User, BasicStrategyVerifyCallbackParams>);
    authenticate(request: Request): Promise<User>;
    private headers;
    private challenge;
}
